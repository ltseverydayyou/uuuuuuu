local ui=nil
local Gui = game:GetObjects("rbxassetid://123755747270522")[1]
local COREGUI= (game:GetService("CoreGui") or game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui"))
local connect=nil
local rPlayer = game:GetService("Players"):FindFirstChildWhichIsA("Player")
local coreGuiProtection = {}
ui=Gui
function cursed()
	local length = math.random(10,20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end
if get_hidden_gui or gethui then
	local hiddenUI = get_hidden_gui or gethui
	local Main = Gui
	Main.Name = cursed()
	Main.Parent = hiddenUI()
	ui = Main
elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
	local Main = Gui
	Main.Name = cursed()
	syn.protect_gui(Main)
	Main.Parent = COREGUI
	ui = Main
elseif COREGUI:FindFirstChild('RobloxGui') then
	pcall(function()
		for i, v in pairs(ui:GetDescendants()) do
			coreGuiProtection[v] = rPlayer.Name
		end
		ui.DescendantAdded:Connect(function(v)
			coreGuiProtection[v] = rPlayer.Name
		end)
		coreGuiProtection[ui] = rPlayer.Name

		local meta = getrawmetatable(game)
		local tostr = meta.__tostring
		setreadonly(meta, false)
		meta.__tostring = newcclosure(function(t)
			if coreGuiProtection[t] and not checkcaller() then
				return coreGuiProtection[t]
			end
			return tostr(t)
		end)
	end)
	if not game:GetService("RunService"):IsStudio() then
		local newGui = game:GetService("CoreGui"):FindFirstChildWhichIsA("ScreenGui")
		newGui.DescendantAdded:Connect(function(v)
			coreGuiProtection[v] = rPlayer.Name
		end)
		for i, v in pairs(ui:GetChildren()) do
			v.Parent = newGui
		end
		ui = newGui
	end
else
	local Main = Gui
	Main.Name = cursed()
	Main.Parent = COREGUI
	ui = Main
end

local UniverseViewerFrame = ui.UniverseViewer
local UniverseList = UniverseViewerFrame.Container.List
local UniverseExample = UniverseList.TextButton
UniverseExample.Parent = nil

Draggable = function(ui, dragui)
	if not dragui then dragui = ui end
	local UserInputService = game:GetService("UserInputService")

	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		ui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	dragui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = ui.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	dragui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end
tweeny = function(obj, style, direction, duration, goal)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle[style], Enum.EasingDirection[direction])
	local tween = game:GetService("TweenService"):Create(obj, tweenInfo, goal)
	tween:Play()
	return tween
end
menustuff = function(menu)
	local mini = menu:FindFirstChild("Minimize", true)
	local exit = menu:FindFirstChild("Exit", true)
	local minimized = false
	local sizeX, sizeY = Instance.new("IntValue", menu), Instance.new("IntValue", menu)
	mini.MouseButton1Click:Connect(function()
		minimized = not minimized
		if minimized then
			sizeX.Value = menu.Size.X.Offset
			sizeY.Value = menu.Size.Y.Offset
			tweeny(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, 283, 0, 25)})
		else
			tweeny(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, sizeX.Value, 0, sizeY.Value)})
		end
	end)
	exit.MouseButton1Click:Connect(function()
		if connect then connect:Disconnect() connect=nil end
		menu.Parent:Destroy()
	end)
	Draggable(menu, menu.Topbar)
end

menustuff(UniverseViewerFrame)
UniverseViewerFrame.Position = UDim2.new(0.5, -283/2+5, 0.5, -260/2+5)

task.spawn(function()
	local page = game:GetService("AssetService"):GetGamePlacesAsync()
	while true do
		local template = UniverseExample
		local list = UniverseList
		for _, place in page:GetCurrentPage() do
			local btn = template:Clone()
			btn.Parent=list
			btn.Name=place.Name
			btn.Text=place.Name.." ("..place.PlaceId..")"
			btn.MouseButton1Click:Connect(function()
				game:GetService("TeleportService"):Teleport(place.PlaceId, game:GetService("Players").LocalPlayer)
				print("Teleport To Place: "..place.Name)
			end)
		end
		if page.IsFinished then
			break
		end
		page:AdvanceToNextPageAsync()
	end
end)

connect = game:GetService"RunService".Stepped:Connect(function()
    UniverseList.CanvasSize = UDim2.new(0, 0, 0, UniverseList:FindFirstChildOfClass("UIListLayout").AbsoluteContentSize.Y)
end)
