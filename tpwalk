local player = game:GetService("Players").LocalPlayer

function protectUI(sGui)
    local function blankfunction(...)
        return ...
    end

    local cloneref = cloneref or blankfunction

    local function SafeGetService(service)
        return cloneref(game:GetService(service)) or game:GetService(service)
    end

    local cGUI = SafeGetService("CoreGui")
    local rPlr = SafeGetService("Players"):FindFirstChildWhichIsA("Player")
    local cGUIProtect = {}
    local rService = SafeGetService("RunService")
    local lPlr = SafeGetService("Players").LocalPlayer

    local function NAProtection(inst, var)
        if inst then
            if var then
                inst[var] = "\0"
                inst.Archivable = false
            else
                inst.Name = "\0"
                inst.Archivable = false
            end
        end
    end

    if (get_hidden_gui or gethui) then
        local hiddenUI = (get_hidden_gui or gethui)
        NAProtection(sGui)
        sGui.Parent = hiddenUI()
        return sGui
    elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
        NAProtection(sGui)
        syn.protect_gui(sGui)
        sGui.Parent = cGUI
        return sGui
    elseif cGUI:FindFirstChildWhichIsA("ScreenGui") then
        pcall(function()
            for _, v in pairs(sGui:GetDescendants()) do
                cGUIProtect[v] = rPlr.Name
            end
            sGui.DescendantAdded:Connect(function(v)
                cGUIProtect[v] = rPlr.Name
            end)
            cGUIProtect[sGui] = rPlr.Name

            local meta = getrawmetatable(game)
            local tostr = meta.__tostring
            setreadonly(meta, false)
            meta.__tostring = newcclosure(function(t)
                if cGUIProtect[t] and not checkcaller() then
                    return cGUIProtect[t]
                end
                return tostr(t)
            end)
        end)
        if not rService:IsStudio() then
            local newGui = cGUI:FindFirstChildWhichIsA("ScreenGui")
            newGui.DescendantAdded:Connect(function(v)
                cGUIProtect[v] = rPlr.Name
            end)
            for _, v in pairs(sGui:GetChildren()) do
                v.Parent = newGui
            end
            sGui = newGui
        end
        return sGui
    elseif cGUI then
        NAProtection(sGui)
        sGui.Parent = cGUI
        return sGui
    elseif lPlr and lPlr:FindFirstChild("PlayerGui") then
        NAProtection(sGui)
        sGui.Parent = lPlr:FindFirstChild("PlayerGui")
        return sGui
    else
        return nil
    end
end

local screenGui = Instance.new("ScreenGui")
protectUI(screenGui)
screenGui.Name = math.random(1, 100000)
screenGui.ResetOnSpawn = false

local listLayout = Instance.new("UIListLayout")
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Parent = screenGui
listLayout.FillDirection = Enum.FillDirection.Vertical
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
listLayout.VerticalAlignment = Enum.VerticalAlignment.Top

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleTPWalkButton"
toggleButton.Text = "Toggle TPWalk"
toggleButton.TextScaled = true
toggleButton.LayoutOrder = 1
toggleButton.Size = UDim2.new(0, 50, 0, 30)
toggleButton.Position = UDim2.new(0.5, -75, 0, 0)
toggleButton.Parent = screenGui

local speedTextBox = Instance.new("TextBox")
speedTextBox.Name = "SpeedTextBox"
speedTextBox.Text = "Enter Speed"
speedTextBox.TextScaled = true
speedTextBox.Size = UDim2.new(0, 100, 0, 30)
speedTextBox.Position = UDim2.new(0.5, -75, 0, 50)
speedTextBox.Parent = screenGui

local TPWalk = false
local TPWalking
local Speed = 1
local DefaultSpeed = 1

local function toggleTPWalk()
    if TPWalk then
        TPWalk = false
        TPWalking:Disconnect()
    else
        TPWalk = true
        TPWalking = game:GetService("RunService").Stepped:Connect(function()
            if TPWalk then
                local character = player.Character
                local humanoid = character and character:FindFirstChildWhichIsA("Humanoid")

                if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                    local moveDirection = humanoid.MoveDirection

                    if Speed then
                        character:TranslateBy(moveDirection * Speed)
                    else
                        character:TranslateBy(moveDirection)
                    end
                end
            else
                TPWalking:Disconnect()
            end
        end)
    end
end

local function updateSpeed()
    local newSpeed = tonumber(speedTextBox.Text)

    if newSpeed then
        local formattedSpeed = string.format("%.1f", newSpeed)
        Speed = tonumber(formattedSpeed)
        speedTextBox.Text = formattedSpeed
    else
        speedTextBox.Text = "1"
        Speed = 1
    end
end
toggleButton.MouseButton1Click:Connect(toggleTPWalk)
speedTextBox.FocusLost:Connect(updateSpeed)

speedTextBox:GetPropertyChangedSignal("Text"):Connect(function()
    local newText = speedTextBox.Text:gsub("[^%d.]", "")

    if newText ~= speedTextBox.Text then
        speedTextBox.Text = newText
    end
end)
